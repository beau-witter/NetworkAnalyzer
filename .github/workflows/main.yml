name: NetworkAnalyzer CI

defaults:
  run:
    shell: pwsh

on:
  push:
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ModuleName: 'NetworkAnalyzer'
  GitHubPackageUri: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'

jobs:
  test:
    name: 'Run Module Tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install InvokeBuild module on the build agent
        run: |
          if(-not (Get-Module -Name InvokeBuild -ListAvailable)) {
            Install-Module InvokeBuild -Force
          }
          Import-Module InvokeBuild
      
      - name: Analyze Code with PSScriptAnalyzer
        run: Invoke-Build -Task Analyze

      - name: Publish Analysis Results
        uses: EnricoMi/publish-unit-test-result-action@v2.4.2
        if: always()
        with:
          comment_mode: off
          files: "build/**/AnalysisResults_PS*.xml"
          check_name: "Analysis Results"

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.ModuleName }}-Analysis-Results
          path: build/**/AnalysisResults_PS*.xml

      - name: Test Code with Pester Tests
        run: Invoke-Build -Task Test

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.4.2
        if: success() || failure()
        with:
          comment_mode: off
          files: "build/**/TestResults_PS*.xml"
          check_name: "Test Results"
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ env.ModuleName }}-Test-Results
          path: build/**/TestResults_PS*.xml
      
      - name: Verify Code Coverage
        run: Invoke-Build -Task CodeCoverage

      - name: Generate Code Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.18
        with:
          reports: build/**/CodeCoverageResults_PS*.xml
          targetDir: coveragereports
          sourceDirs: ${{ env.ModuleName }}
          title: ${{ env.ModuleName }} Code Coverage
      
      - name: Upload Code Coverage Results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ env.ModuleName }}-Code-Coverage-Results
          path: coveragereports
    
  build:
    if: ${{ success() && startsWith( github.ref, 'refs/tags/' ) }}

    name: 'Build Module'
    needs: test
    runs-on: ubuntu-latest

    env:
      PublishLocation: 'publish'

    steps:
      - uses: actions/checkout@v3

      - name: Install InvokeBuild module on the build agent
        run: |
          if(-not (Get-Module -Name InvokeBuild -ListAvailable)) {
            Install-Module InvokeBuild -Force
          }
          Import-Module InvokeBuild
      
      - name: Build ${{ env.ModuleName }} Module
        run: |
          $credential = New-Object System.Management.Automation.PSCredential (${{ github.repository_owner }}, (ConvertTo-SecureString ${{ secrets.GITHUB_TOKEN }} -AsPlainText -Force))
          Invoke-Build -Task Build -Configuration Release -Sourcelocation ${{ env.GitHubPackageUri }} -Credential $credential

      - name: Create NuGet Package
        run: |
          $nuspecFile = (Get-ChildItem -Filter "*.nuspec" -Path "./build" -Recurse).FullName
          nuget pack $nuspecFile -OutputDirectory ${{ env.PublishLocation }}
      
      - name: Upload NuGet Package Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ModuleName }}
          path: ${{ env.PublishLocation }}

  publish:
    if: ${{ success() && startsWith( github.ref, 'refs/tags/' ) }}

    name: 'Publish Module'
    needs: build
    runs-on: ubuntu-latest

    env:
      PublishPath: ${{ github.workspace }}/Deploy

    steps:
      - name: Download Module Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ModuleName }}
          path: "${{ env.PublishPath }}"

      - name: Publish Module to PSGallery and GitHub Packages
        run: |
          Expand-Archive -Path "${{ env.PublishPath }}/*.nupkg" -DestinationPath ./publish/${{ env.ModuleName }}

          # GitHub Packages
          Register-PSRepository -Name "${{ env.ModuleName }}-repository" -SourceLocation ${{ env.GitHubPackageUri }} -PublishLocation ${{ env.GitHubPackageUri }}
          Publish-Module -Path ./publish/${{ env.ModuleName }} -NuGetApiKey ${{ secrets.GITHUB_TOKEN }} -Repository "${{ env.ModuleName }}-repository" 
          
          # IMPORTANT to prevent duplicate [Content_Types].xml from existing from PSGallery
          Remove-Item -Path "./publish/${{ env.ModuleName }}/[Content_Types].xml"

          # PSGallery
          Publish-Module -Path ./publish/${{ env.ModuleName }} -NuGetApiKey ${{ secrets.PSGALLERY }} -Repository PSGallery 
